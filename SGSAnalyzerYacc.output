

Terminals which are not used:

   LIST_SEAT


Conflict in state 52 between rule 38 and token ASSIGN resolved as shift.
Conflict in state 52 between rule 38 and token ADD resolved as shift.
Conflict in state 52 between rule 38 and token SUB resolved as shift.
Conflict in state 52 between rule 38 and token MUL resolved as shift.
Conflict in state 52 between rule 38 and token DIV resolved as shift.
Conflict in state 52 between rule 38 and token LEFT_PAREN resolved as shift.
Conflict in state 53 between rule 34 and token ASSIGN resolved as reduce.
Conflict in state 53 between rule 34 and token ADD resolved as reduce.
Conflict in state 53 between rule 34 and token SUB resolved as reduce.
Conflict in state 53 between rule 34 and token MUL resolved as shift.
Conflict in state 53 between rule 34 and token DIV resolved as shift.
Conflict in state 53 between rule 34 and token LEFT_PAREN resolved as shift.
Conflict in state 54 between rule 35 and token ASSIGN resolved as reduce.
Conflict in state 54 between rule 35 and token ADD resolved as reduce.
Conflict in state 54 between rule 35 and token SUB resolved as reduce.
Conflict in state 54 between rule 35 and token MUL resolved as shift.
Conflict in state 54 between rule 35 and token DIV resolved as shift.
Conflict in state 54 between rule 35 and token LEFT_PAREN resolved as shift.
Conflict in state 55 between rule 36 and token ASSIGN resolved as reduce.
Conflict in state 55 between rule 36 and token ADD resolved as reduce.
Conflict in state 55 between rule 36 and token SUB resolved as reduce.
Conflict in state 55 between rule 36 and token MUL resolved as reduce.
Conflict in state 55 between rule 36 and token DIV resolved as reduce.
Conflict in state 55 between rule 36 and token LEFT_PAREN resolved as shift.
Conflict in state 56 between rule 37 and token ASSIGN resolved as reduce.
Conflict in state 56 between rule 37 and token ADD resolved as reduce.
Conflict in state 56 between rule 37 and token SUB resolved as reduce.
Conflict in state 56 between rule 37 and token MUL resolved as reduce.
Conflict in state 56 between rule 37 and token DIV resolved as reduce.
Conflict in state 56 between rule 37 and token LEFT_PAREN resolved as shift.
Conflict in state 72 between rule 21 and token ELSE resolved as shift.
State 15 contains 2 reduce/reduce conflicts.
State 30 contains 2 reduce/reduce conflicts.

Grammar
rule 1    final -> statement
rule 2    final -> function
rule 3    final -> final statement
rule 4    final -> final function
rule 5    statements_list -> statement
rule 6    statements_list -> statements_list statement
rule 7    parameters -> IDENTIFIER
rule 8    parameters -> parameters COMMA IDENTIFIER
rule 9    function -> FUNCTION IDENTIFIER LEFT_PAREN parameters RIGHT_PAREN statement
rule 10   function -> FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN statement
rule 11   function -> FUNCTION LEFT_PAREN parameters RIGHT_PAREN statement
rule 12   function -> FUNCTION LEFT_PAREN RIGHT_PAREN statement
rule 13   arguments -> expression
rule 14   arguments -> arguments COMMA expression
rule 15   statement -> SEMICOLON
rule 16   statement -> LEFT_BRACE RIGHT_BRACE
rule 17   statement -> expression SEMICOLON
rule 18   statement -> LEFT_BRACE statements_list RIGHT_BRACE
rule 19   statement -> VAR IDENTIFIER SEMICOLON
rule 20   statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON
rule 21   statement -> IF LEFT_PAREN expression RIGHT_PAREN statement
rule 22   statement -> IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement
rule 23   statement -> FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN statement
rule 24   statement -> WHILE LEFT_PAREN expression RIGHT_PAREN statement
rule 25   statement -> DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON
rule 26   expression -> DOUBLE_LITERAL
rule 27   expression -> INTEGER_LITERAL
rule 28   expression -> STRING_LITERAL
rule 29   expression -> IDENTIFIER
rule 30   expression -> function
rule 31   expression -> LEFT_PAREN expression RIGHT_PAREN
rule 32   expression -> expression LEFT_PAREN RIGHT_PAREN
rule 33   expression -> expression LEFT_PAREN arguments RIGHT_PAREN
rule 34   expression -> expression ADD expression
rule 35   expression -> expression SUB expression
rule 36   expression -> expression MUL expression
rule 37   expression -> expression DIV expression
rule 38   expression -> expression ASSIGN expression

Terminals, with rules where they appear

$ (-1)
error (256)
IF (257) 21 22
FOR (258) 23
WHILE (259) 24 25
DO (260) 25
FUNCTION (261) 9 10 11 12
VAR (262) 19 20
DOUBLE_LITERAL (263) 26
INTEGER_LITERAL (264) 27
STRING_LITERAL (265) 28
IDENTIFIER (266) 7 8 9 10 19 20 29
RIGHT_PAREN (267) 9 10 11 12 21 22 23 24 25 31 32 33
LEFT_BRACE (268) 16 18
RIGHT_BRACE (269) 16 18
SEMICOLON (270) 15 17 19 20 23 25
COMMA (271) 8 14
LIST_SEAT (272)
ASSIGN (273) 20 38
ADD (274) 34
SUB (275) 35
MUL (276) 36
DIV (277) 37
IFX (278)
ELSE (279) 22
LEFT_PAREN (280) 9 10 11 12 21 22 23 24 25 31 32 33

Nonterminals, with rules where they appear

final (27)
    on left: 1 2 3 4, on right: 3 4
statements_list (28)
    on left: 5 6, on right: 6 18
parameters (29)
    on left: 7 8, on right: 8 9 11
function (30)
    on left: 9 10 11 12, on right: 2 4 30
arguments (31)
    on left: 13 14, on right: 14 33
statement (32)
    on left: 15 16 17 18 19 20 21 22 23 24 25, on right: 1 3 5 6 9
    10 11 12 21 22 23 24 25
expression (33)
    on left: 26 27 28 29 30 31 32 33 34 35 36 37 38,
    on right: 13 14 17 20 21 22 23 24 25 31 32 33 34 35 36 37 38


state 0

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    final	go to state 14
    function	go to state 15
    statement	go to state 16
    expression	go to state 17



state 1

    statement  ->  IF . LEFT_PAREN expression RIGHT_PAREN statement   (rule 21)
    statement  ->  IF . LEFT_PAREN expression RIGHT_PAREN statement ELSE statement   (rule 22)

    LEFT_PAREN	shift, and go to state 18



state 2

    statement  ->  FOR . LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN statement   (rule 23)

    LEFT_PAREN	shift, and go to state 19



state 3

    statement  ->  WHILE . LEFT_PAREN expression RIGHT_PAREN statement   (rule 24)

    LEFT_PAREN	shift, and go to state 20



state 4

    statement  ->  DO . statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON   (rule 25)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 22
    expression	go to state 17



state 5

    function  ->  FUNCTION . IDENTIFIER LEFT_PAREN parameters RIGHT_PAREN statement   (rule 9)
    function  ->  FUNCTION . IDENTIFIER LEFT_PAREN RIGHT_PAREN statement   (rule 10)
    function  ->  FUNCTION . LEFT_PAREN parameters RIGHT_PAREN statement   (rule 11)
    function  ->  FUNCTION . LEFT_PAREN RIGHT_PAREN statement   (rule 12)

    IDENTIFIER	shift, and go to state 23
    LEFT_PAREN	shift, and go to state 24



state 6

    statement  ->  VAR . IDENTIFIER SEMICOLON   (rule 19)
    statement  ->  VAR . IDENTIFIER ASSIGN expression SEMICOLON   (rule 20)

    IDENTIFIER	shift, and go to state 25



state 7

    expression  ->  DOUBLE_LITERAL .   (rule 26)

    $default	reduce using rule 26 (expression)



state 8

    expression  ->  INTEGER_LITERAL .   (rule 27)

    $default	reduce using rule 27 (expression)



state 9

    expression  ->  STRING_LITERAL .   (rule 28)

    $default	reduce using rule 28 (expression)



state 10

    expression  ->  IDENTIFIER .   (rule 29)

    $default	reduce using rule 29 (expression)



state 11

    statement  ->  LEFT_BRACE . RIGHT_BRACE   (rule 16)
    statement  ->  LEFT_BRACE . statements_list RIGHT_BRACE   (rule 18)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    RIGHT_BRACE	shift, and go to state 26
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    statements_list	go to state 27
    function	go to state 21
    statement	go to state 28
    expression	go to state 17



state 12

    statement  ->  SEMICOLON .   (rule 15)

    $default	reduce using rule 15 (statement)



state 13

    expression  ->  LEFT_PAREN . expression RIGHT_PAREN   (rule 31)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 29



state 14

    final  ->  final . statement   (rule 3)
    final  ->  final . function   (rule 4)

    $   	go to state 91
    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 30
    statement	go to state 31
    expression	go to state 17



state 15

    final  ->  function .   (rule 2)
    expression  ->  function .   (rule 30)

    SEMICOLON	reduce using rule 2 (final)
    SEMICOLON	[reduce using rule 30 (expression)]
    ASSIGN	reduce using rule 30 (expression)
    ADD 	reduce using rule 30 (expression)
    SUB 	reduce using rule 30 (expression)
    MUL 	reduce using rule 30 (expression)
    DIV 	reduce using rule 30 (expression)
    LEFT_PAREN	reduce using rule 2 (final)
    LEFT_PAREN	[reduce using rule 30 (expression)]
    $default	reduce using rule 2 (final)



state 16

    final  ->  statement .   (rule 1)

    $default	reduce using rule 1 (final)



state 17

    statement  ->  expression . SEMICOLON   (rule 17)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    SEMICOLON	shift, and go to state 32
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 18

    statement  ->  IF LEFT_PAREN . expression RIGHT_PAREN statement   (rule 21)
    statement  ->  IF LEFT_PAREN . expression RIGHT_PAREN statement ELSE statement   (rule 22)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 39



state 19

    statement  ->  FOR LEFT_PAREN . expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN statement   (rule 23)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 40



state 20

    statement  ->  WHILE LEFT_PAREN . expression RIGHT_PAREN statement   (rule 24)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 41



state 21

    expression  ->  function .   (rule 30)

    $default	reduce using rule 30 (expression)



state 22

    statement  ->  DO statement . WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON   (rule 25)

    WHILE	shift, and go to state 42



state 23

    function  ->  FUNCTION IDENTIFIER . LEFT_PAREN parameters RIGHT_PAREN statement   (rule 9)
    function  ->  FUNCTION IDENTIFIER . LEFT_PAREN RIGHT_PAREN statement   (rule 10)

    LEFT_PAREN	shift, and go to state 43



state 24

    function  ->  FUNCTION LEFT_PAREN . parameters RIGHT_PAREN statement   (rule 11)
    function  ->  FUNCTION LEFT_PAREN . RIGHT_PAREN statement   (rule 12)

    IDENTIFIER	shift, and go to state 44
    RIGHT_PAREN	shift, and go to state 45

    parameters	go to state 46



state 25

    statement  ->  VAR IDENTIFIER . SEMICOLON   (rule 19)
    statement  ->  VAR IDENTIFIER . ASSIGN expression SEMICOLON   (rule 20)

    SEMICOLON	shift, and go to state 47
    ASSIGN	shift, and go to state 48



state 26

    statement  ->  LEFT_BRACE RIGHT_BRACE .   (rule 16)

    $default	reduce using rule 16 (statement)



state 27

    statements_list  ->  statements_list . statement   (rule 6)
    statement  ->  LEFT_BRACE statements_list . RIGHT_BRACE   (rule 18)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    RIGHT_BRACE	shift, and go to state 49
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 50
    expression	go to state 17



state 28

    statements_list  ->  statement .   (rule 5)

    $default	reduce using rule 5 (statements_list)



state 29

    expression  ->  LEFT_PAREN expression . RIGHT_PAREN   (rule 31)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    RIGHT_PAREN	shift, and go to state 51
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 30

    final  ->  final function .   (rule 4)
    expression  ->  function .   (rule 30)

    SEMICOLON	reduce using rule 4 (final)
    SEMICOLON	[reduce using rule 30 (expression)]
    ASSIGN	reduce using rule 30 (expression)
    ADD 	reduce using rule 30 (expression)
    SUB 	reduce using rule 30 (expression)
    MUL 	reduce using rule 30 (expression)
    DIV 	reduce using rule 30 (expression)
    LEFT_PAREN	reduce using rule 4 (final)
    LEFT_PAREN	[reduce using rule 30 (expression)]
    $default	reduce using rule 4 (final)



state 31

    final  ->  final statement .   (rule 3)

    $default	reduce using rule 3 (final)



state 32

    statement  ->  expression SEMICOLON .   (rule 17)

    $default	reduce using rule 17 (statement)



state 33

    expression  ->  expression ASSIGN . expression   (rule 38)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 52



state 34

    expression  ->  expression ADD . expression   (rule 34)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 53



state 35

    expression  ->  expression SUB . expression   (rule 35)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 54



state 36

    expression  ->  expression MUL . expression   (rule 36)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 55



state 37

    expression  ->  expression DIV . expression   (rule 37)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 56



state 38

    expression  ->  expression LEFT_PAREN . RIGHT_PAREN   (rule 32)
    expression  ->  expression LEFT_PAREN . arguments RIGHT_PAREN   (rule 33)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    RIGHT_PAREN	shift, and go to state 57
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    arguments	go to state 58
    expression	go to state 59



state 39

    statement  ->  IF LEFT_PAREN expression . RIGHT_PAREN statement   (rule 21)
    statement  ->  IF LEFT_PAREN expression . RIGHT_PAREN statement ELSE statement   (rule 22)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    RIGHT_PAREN	shift, and go to state 60
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 40

    statement  ->  FOR LEFT_PAREN expression . SEMICOLON expression SEMICOLON expression RIGHT_PAREN statement   (rule 23)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    SEMICOLON	shift, and go to state 61
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 41

    statement  ->  WHILE LEFT_PAREN expression . RIGHT_PAREN statement   (rule 24)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    RIGHT_PAREN	shift, and go to state 62
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 42

    statement  ->  DO statement WHILE . LEFT_PAREN expression RIGHT_PAREN SEMICOLON   (rule 25)

    LEFT_PAREN	shift, and go to state 63



state 43

    function  ->  FUNCTION IDENTIFIER LEFT_PAREN . parameters RIGHT_PAREN statement   (rule 9)
    function  ->  FUNCTION IDENTIFIER LEFT_PAREN . RIGHT_PAREN statement   (rule 10)

    IDENTIFIER	shift, and go to state 44
    RIGHT_PAREN	shift, and go to state 64

    parameters	go to state 65



state 44

    parameters  ->  IDENTIFIER .   (rule 7)

    $default	reduce using rule 7 (parameters)



state 45

    function  ->  FUNCTION LEFT_PAREN RIGHT_PAREN . statement   (rule 12)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 66
    expression	go to state 17



state 46

    parameters  ->  parameters . COMMA IDENTIFIER   (rule 8)
    function  ->  FUNCTION LEFT_PAREN parameters . RIGHT_PAREN statement   (rule 11)

    RIGHT_PAREN	shift, and go to state 67
    COMMA	shift, and go to state 68



state 47

    statement  ->  VAR IDENTIFIER SEMICOLON .   (rule 19)

    $default	reduce using rule 19 (statement)



state 48

    statement  ->  VAR IDENTIFIER ASSIGN . expression SEMICOLON   (rule 20)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 69



state 49

    statement  ->  LEFT_BRACE statements_list RIGHT_BRACE .   (rule 18)

    $default	reduce using rule 18 (statement)



state 50

    statements_list  ->  statements_list statement .   (rule 6)

    $default	reduce using rule 6 (statements_list)



state 51

    expression  ->  LEFT_PAREN expression RIGHT_PAREN .   (rule 31)

    $default	reduce using rule 31 (expression)



state 52

    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)
    expression  ->  expression ASSIGN expression .   (rule 38)

    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 38 (expression)



state 53

    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression ADD expression .   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 34 (expression)



state 54

    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression SUB expression .   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 35 (expression)



state 55

    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression MUL expression .   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 36 (expression)



state 56

    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression DIV expression .   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 37 (expression)



state 57

    expression  ->  expression LEFT_PAREN RIGHT_PAREN .   (rule 32)

    $default	reduce using rule 32 (expression)



state 58

    arguments  ->  arguments . COMMA expression   (rule 14)
    expression  ->  expression LEFT_PAREN arguments . RIGHT_PAREN   (rule 33)

    RIGHT_PAREN	shift, and go to state 70
    COMMA	shift, and go to state 71



state 59

    arguments  ->  expression .   (rule 13)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 13 (arguments)



state 60

    statement  ->  IF LEFT_PAREN expression RIGHT_PAREN . statement   (rule 21)
    statement  ->  IF LEFT_PAREN expression RIGHT_PAREN . statement ELSE statement   (rule 22)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 72
    expression	go to state 17



state 61

    statement  ->  FOR LEFT_PAREN expression SEMICOLON . expression SEMICOLON expression RIGHT_PAREN statement   (rule 23)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 73



state 62

    statement  ->  WHILE LEFT_PAREN expression RIGHT_PAREN . statement   (rule 24)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 74
    expression	go to state 17



state 63

    statement  ->  DO statement WHILE LEFT_PAREN . expression RIGHT_PAREN SEMICOLON   (rule 25)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 75



state 64

    function  ->  FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN . statement   (rule 10)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 76
    expression	go to state 17



state 65

    parameters  ->  parameters . COMMA IDENTIFIER   (rule 8)
    function  ->  FUNCTION IDENTIFIER LEFT_PAREN parameters . RIGHT_PAREN statement   (rule 9)

    RIGHT_PAREN	shift, and go to state 77
    COMMA	shift, and go to state 68



state 66

    function  ->  FUNCTION LEFT_PAREN RIGHT_PAREN statement .   (rule 12)

    $default	reduce using rule 12 (function)



state 67

    function  ->  FUNCTION LEFT_PAREN parameters RIGHT_PAREN . statement   (rule 11)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 78
    expression	go to state 17



state 68

    parameters  ->  parameters COMMA . IDENTIFIER   (rule 8)

    IDENTIFIER	shift, and go to state 79



state 69

    statement  ->  VAR IDENTIFIER ASSIGN expression . SEMICOLON   (rule 20)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    SEMICOLON	shift, and go to state 80
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 70

    expression  ->  expression LEFT_PAREN arguments RIGHT_PAREN .   (rule 33)

    $default	reduce using rule 33 (expression)



state 71

    arguments  ->  arguments COMMA . expression   (rule 14)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 81



state 72

    statement  ->  IF LEFT_PAREN expression RIGHT_PAREN statement .   (rule 21)
    statement  ->  IF LEFT_PAREN expression RIGHT_PAREN statement . ELSE statement   (rule 22)

    ELSE	shift, and go to state 82

    $default	reduce using rule 21 (statement)



state 73

    statement  ->  FOR LEFT_PAREN expression SEMICOLON expression . SEMICOLON expression RIGHT_PAREN statement   (rule 23)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    SEMICOLON	shift, and go to state 83
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 74

    statement  ->  WHILE LEFT_PAREN expression RIGHT_PAREN statement .   (rule 24)

    $default	reduce using rule 24 (statement)



state 75

    statement  ->  DO statement WHILE LEFT_PAREN expression . RIGHT_PAREN SEMICOLON   (rule 25)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    RIGHT_PAREN	shift, and go to state 84
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 76

    function  ->  FUNCTION IDENTIFIER LEFT_PAREN RIGHT_PAREN statement .   (rule 10)

    $default	reduce using rule 10 (function)



state 77

    function  ->  FUNCTION IDENTIFIER LEFT_PAREN parameters RIGHT_PAREN . statement   (rule 9)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 85
    expression	go to state 17



state 78

    function  ->  FUNCTION LEFT_PAREN parameters RIGHT_PAREN statement .   (rule 11)

    $default	reduce using rule 11 (function)



state 79

    parameters  ->  parameters COMMA IDENTIFIER .   (rule 8)

    $default	reduce using rule 8 (parameters)



state 80

    statement  ->  VAR IDENTIFIER ASSIGN expression SEMICOLON .   (rule 20)

    $default	reduce using rule 20 (statement)



state 81

    arguments  ->  arguments COMMA expression .   (rule 14)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38

    $default	reduce using rule 14 (arguments)



state 82

    statement  ->  IF LEFT_PAREN expression RIGHT_PAREN statement ELSE . statement   (rule 22)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 86
    expression	go to state 17



state 83

    statement  ->  FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON . expression RIGHT_PAREN statement   (rule 23)

    FUNCTION	shift, and go to state 5
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    expression	go to state 87



state 84

    statement  ->  DO statement WHILE LEFT_PAREN expression RIGHT_PAREN . SEMICOLON   (rule 25)

    SEMICOLON	shift, and go to state 88



state 85

    function  ->  FUNCTION IDENTIFIER LEFT_PAREN parameters RIGHT_PAREN statement .   (rule 9)

    $default	reduce using rule 9 (function)



state 86

    statement  ->  IF LEFT_PAREN expression RIGHT_PAREN statement ELSE statement .   (rule 22)

    $default	reduce using rule 22 (statement)



state 87

    statement  ->  FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression . RIGHT_PAREN statement   (rule 23)
    expression  ->  expression . LEFT_PAREN RIGHT_PAREN   (rule 32)
    expression  ->  expression . LEFT_PAREN arguments RIGHT_PAREN   (rule 33)
    expression  ->  expression . ADD expression   (rule 34)
    expression  ->  expression . SUB expression   (rule 35)
    expression  ->  expression . MUL expression   (rule 36)
    expression  ->  expression . DIV expression   (rule 37)
    expression  ->  expression . ASSIGN expression   (rule 38)

    RIGHT_PAREN	shift, and go to state 89
    ASSIGN	shift, and go to state 33
    ADD 	shift, and go to state 34
    SUB 	shift, and go to state 35
    MUL 	shift, and go to state 36
    DIV 	shift, and go to state 37
    LEFT_PAREN	shift, and go to state 38



state 88

    statement  ->  DO statement WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON .   (rule 25)

    $default	reduce using rule 25 (statement)



state 89

    statement  ->  FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN . statement   (rule 23)

    IF  	shift, and go to state 1
    FOR 	shift, and go to state 2
    WHILE	shift, and go to state 3
    DO  	shift, and go to state 4
    FUNCTION	shift, and go to state 5
    VAR 	shift, and go to state 6
    DOUBLE_LITERAL	shift, and go to state 7
    INTEGER_LITERAL	shift, and go to state 8
    STRING_LITERAL	shift, and go to state 9
    IDENTIFIER	shift, and go to state 10
    LEFT_BRACE	shift, and go to state 11
    SEMICOLON	shift, and go to state 12
    LEFT_PAREN	shift, and go to state 13

    function	go to state 21
    statement	go to state 90
    expression	go to state 17



state 90

    statement  ->  FOR LEFT_PAREN expression SEMICOLON expression SEMICOLON expression RIGHT_PAREN statement .   (rule 23)

    $default	reduce using rule 23 (statement)



state 91

    $   	go to state 92



state 92

    $default	accept
